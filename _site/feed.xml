<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 12 Nov 2019 15:19:51 +0700</pubDate>
    <lastBuildDate>Tue, 12 Nov 2019 15:19:51 +0700</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Rails 6 - Active Storage changes</title>
        <description>&lt;p&gt;This article found in: https://blog.saeloun.com/2019/11/04/rails-6-active-storage-updates.html&lt;/p&gt;

&lt;p&gt;Active Storage was introduced in Rails 5.2. In rails 6, the are enhancements (nâng cao) done to Active Storage.&lt;/p&gt;

&lt;p&gt;Let’s explore them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mini_magick replaced by image_processing gem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In rails 5.2, Active Storage was using &lt;code&gt;mini_magick&lt;/code&gt; to handle (xử lý) image resizing(variants) (Kích thước)&lt;/p&gt;

&lt;p&gt;In rails 6, a new gem called &lt;code&gt;image_processing&lt;/code&gt; is used by default to handle image variants
(Trong rails 6, gem &lt;code&gt;image_processing&lt;/code&gt; được sử dụng làm mặc định để xử lý việc thay đổi kích thước ảnh)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;image_processing&lt;/code&gt; gem has below advantages(Lợi thế):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;New methods #resize_to_fit, #resize_to_fill, etc also sharpens the thumbnail (làm sắc nét hình ảnh) after resizing.&lt;/li&gt;
  &lt;li&gt;It fixes the image orientation automatically (tự động sử đổi hướng hình ảnh).&lt;/li&gt;
  &lt;li&gt;It provides another backend libvips that has significantly better performance than (Hiệu suất tốt hơn đáng kể) ImageMagick. With ImageMagick, resizing and sharpening (thay đổi kích cỡ và làm nét) a 1600x900 image to 800x800 is 1.87x slower, and to 300x300 is 1.18x slower. On libvips it doesn’t go above 1.20x slower, on average (trung bình) it’s only about 1.10x slower.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;New image variants support&lt;/strong&gt; (Hỗ trợ biến thể hình ảnh mới)
With addition (việc thêm) of image_processing gem, support for new image variants BMP (PR), TIFF (PR) and progressive JPEG (PR) was introduced (đã được giới thiệu).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix for &lt;code&gt;has_many_attached&lt;/code&gt; field in update query&lt;/strong&gt;
Let’s say we have a User class and it has field images. Users can upload multiple images to their profiles. So we add has_many_attached method to User class as shown below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class User &amp;lt; ApplicationRecord
  has_many_attached :images
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Before Rails 6:&lt;/em&gt;
We attach (đính kèm)) an image to the user as shown below and verify the count&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user = User.first
user.images.attach(filename: &quot;profile_pic.jpg&quot;)

user.images.count
=&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we update the image field, the new image was getting appended to the existing images collection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blog = ActiveStorage::Blob.create_after_upload!(filename: &quot;updated_pic.jpg&quot;)
user.update(images: [blog])

user.images.count
=&amp;gt; 2
user.images.first.filename
=&amp;gt; &quot;profile_pic.jpg&quot;
user.images.last.filename
=&amp;gt; &quot;updated_pic.jpg&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not consistent (Không thích hợp) with ActiveRecord update, where it replaces the existing value of a record.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In rails 6:&lt;/em&gt;
update query replaces the existing collection instead of appending to the collection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user.images.attach(filename: &quot;profile_pic.jpg&quot;)

user.images.count
=&amp;gt; 1

blog = ActiveStorage::Blob.create_after_upload!(filename: &quot;updated_pic.jpg&quot;)
user.update(images: [blog])

user.images.count
=&amp;gt; 1
user.images.first.filename
=&amp;gt; &quot;updated_pic.jpg&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can append files by using the attach function.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Nov 2019 00:00:00 +0700</pubDate>
        <link>http://localhost:4000/tech/2019/11/12/rails-6-active-storage-changes/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2019/11/12/rails-6-active-storage-changes/</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Sử dụng scopes trong Ruby on Rails</title>
        <description>&lt;p&gt;This article found in: https://www.rubyguides.com/2019/10/scopes-in-ruby-on-rails/&lt;/p&gt;

&lt;p&gt;Let’s begin!&lt;/p&gt;

&lt;p&gt;What is scope in Rails &amp;amp; why is it useful (hữu ích) ?&lt;/p&gt;

&lt;p&gt;Well…&lt;/p&gt;

&lt;p&gt;Scopes are custom queries (Truy vấn tùy chỉnh) that you define inside (bên trong) your Rails models with the &lt;code&gt;scope&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every scope takes two arguments:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A name, which you use to call this scope in your code&lt;/li&gt;
  &lt;li&gt;A lambda, which implements the query&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It looks like this (tương tự với):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Fruit &amp;lt; ApplicationRecord
  scope :with_juice, -&amp;gt; { where(&quot;juice &amp;gt; 0&quot;) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result of calling a scope, you’ll get an &lt;code&gt;ActiveRecord::Relation&lt;/code&gt; object.
(Kết quả khi sử dụng &lt;code&gt;scope&lt;/code&gt;, bạn sẽ nhận được một &lt;code&gt;ActiveRecord::Relation&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Which means you can chain &amp;amp; combine scopes!
(Điều đó có nghĩa rằng bạn có thể kết hợp các scope lại với nhau)&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Fruit.with_juice.with_round_shape.first(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now:&lt;/p&gt;

&lt;p&gt;There’s more to learn about Rails scopes, so let’s keep exploring the topic.
(Phần mở rộng)&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-scope--khi-nào-sử-dụng-scope-&quot;&gt;When to use scope ? (Khi nào sử dụng scope ?)&lt;/h3&gt;
&lt;p&gt;Ok, scopes are cool, but when should you use them?&lt;/p&gt;

&lt;p&gt;Let’s see an example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def index
  @books = Book.where(&quot;LENGTH(title) &amp;gt; 20&quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an index controller action that wants to display books with titles longer than 20 characters.
(Trong action index trên muốn hiển thị những đối tượng books mà title có độ dài &amp;gt; 20 kí tự)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s fine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But if you want to use this query in other places, you’re going to have duplicated code.
(Nhưng nếu bạn muốn sử dụng lại câu truy vấn trên ở nơi khác, bajnn sẽ lặp lại code)&lt;/p&gt;

&lt;p&gt;Duplicated code makes your project harder to maintain.
(Lặp lại code khiến dự án của bạn khó khăn cho maintain)&lt;/p&gt;

&lt;p&gt;Let’s move this query into a scope.
(Hãy di chuyển những câu truy vấn đó vào scope)&lt;/p&gt;

&lt;p&gt;Like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Book
  scope :with_long_title, -&amp;gt; { where(&quot;LENGTH(title) &amp;gt; 20&quot;) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our controller action looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def index
  @books = Book.with_long_title
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-to-use-rails-scopes-with-arguments-sử-dụng-scope-với-đối-số&quot;&gt;How to Use Rails Scopes With Arguments (Sử dụng scope với đối số)&lt;/h3&gt;
&lt;p&gt;You may want to introduce a variable into a scope so you can make it more flexible.
(Bạn có thể muốn khai báo &lt;code&gt;biến&lt;/code&gt; trong scope để có thể khiến scope trở nên linh hoạt hơn)&lt;/p&gt;

&lt;p&gt;Here’s how:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Book
  scope :with_long_title, -&amp;gt;(length) { where(&quot;LENGTH(title) &amp;gt; ?&quot;, length) }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The question mark (?) is a placeholder, it’ll be replaced by the value of length. This makes your code safer.
(Dấu &lt;code&gt;?&lt;/code&gt; là một phần trống, nó sẽ được thay bằng giá trị của chiều dài tức biến truyền vào. Nó làm cho code trở nên an toàn hơn))&lt;/p&gt;

&lt;p&gt;If you want a default value:
(Khi cần khai báo giá trị mặc định của biến truyền vào:)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Book
  scope :with_long_title, -&amp;gt;(length = 20) { where(&quot;LENGTH(title) &amp;gt; ?&quot;, length) }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Give it a try!
(Hãy thử dùng nó)&lt;/p&gt;

&lt;h3 id=&quot;scope-vs-instance-method-so-sánh-scope-và-hàm-instance&quot;&gt;Scope vs Instance Method (So sánh scope và hàm instance)&lt;/h3&gt;
&lt;p&gt;Scopes aren’t doing anything magical or super special.
(Scope không làm bất cứ điều gì kỳ diệu hoặc siêu đặc biệt)&lt;/p&gt;

&lt;p&gt;They are just methods.
(Chúng chỉ là methods)&lt;/p&gt;

&lt;p&gt;In fact… You could do the same thing using class methods!
(Bạn có thể làm tương tự bằng các sử dụng &lt;code&gt;class methods&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Fruit
  def self.with_juice
    where(&quot;juice &amp;gt; 0&quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there are design advantages to using scopes over class methods.
(Nhưng có những lợi ích về mặt design để dử dụng scopes hơn là sử dụng &lt;code&gt;class method&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Here’s why:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Scopes result in cleaner code because of their syntax
(Scopes trông sạch sẽ hơn vì cú pháp đơn giản của nó)&lt;/li&gt;
  &lt;li&gt;Scopes are used for exactly one thing, so you know what you get the moment you see one
(Scope được sử dụng chính xác cho một mục đích, vì vậy bạn có thể biết ngay mục đích của scope đó ngay khi bạn đọc)&lt;/li&gt;
  &lt;li&gt;Scopes aren’t mixed with other methods, so they’re easier to spot
(Scope không trộn lẫn với các &lt;code&gt;methods&lt;/code&gt; khác, vì thế nó dễ dàng có thể được phát hiện ra trong code)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In terms of functionality, the only difference is that scopes guarantee an ActiveRecord::Relation, and class methods don’t.
(Về mặt chức năng, điều khác biệt duy nhất mà scope bảo đảm đó chính là trả về một &lt;code&gt;ActiveRecord::Relation&lt;/code&gt; mà &lt;code&gt;class methods&lt;/code&gt; thì không.)&lt;/p&gt;

&lt;p&gt;This helps you avoid errors when your scope returns nothing.
(Điều đó giuos tránh được lỗi khi &lt;code&gt;scope&lt;/code&gt; không trả về  kết quả)&lt;/p&gt;

&lt;h3 id=&quot;dont-use-default-scopes-không-sử-dụng-default-scope&quot;&gt;Don’t Use Default Scopes (Không sử dụng default scope)&lt;/h3&gt;
&lt;p&gt;A default scope is one which is automatically applied to your model.
(Default scope là scope luôn được áp dụng cho model khi khởi tạo)&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Post
  default_scope { where(published: true) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Default scopes are so attractive(hấp dẫn).
But they’re often the wrong choice (Lựa chọn sai) because you’ll probably forget (có thể quên) you have them defined, run into strange errors (chạy vào những lỗi lạ), and waste precious time (lãng phí thời gian quý báu) debugging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With that said…&lt;/strong&gt; (Khắc phục khi sử dụng default scope)
If you have to work with default scopes, you may need to use the unscoped method to disable all currently applied scopes.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Nov 2019 00:00:00 +0700</pubDate>
        <link>http://localhost:4000/tech/2019/11/12/how-to-use-scopes-in-ruby-on-rails/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2019/11/12/how-to-use-scopes-in-ruby-on-rails/</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Ruby inject vs each_with_object</title>
        <description>&lt;p&gt;Có thể bạn đã nghe qua hoặc đã dùng thử với &lt;code&gt;inject&lt;/code&gt; và &lt;code&gt;each_with_object&lt;/code&gt; nhưng chưa thực sự hiểu sâu về chúng mà chỉ đọc qua guide về cách sử dụng căn bản. Hôm nay chúng ta sẽ đi sâu tìm hiểu để có một cái nhìn sâu hơn về &lt;code&gt;inject&lt;/code&gt; và &lt;code&gt;each_with_object&lt;/code&gt; thông qua các ví dụ trực quan.&lt;/p&gt;

&lt;h3 id=&quot;inject&quot;&gt;inject&lt;/h3&gt;
&lt;p&gt;Định nghĩa trên trang  &lt;a href=&quot;https://apidock.com/rails/Enumerable/inject&quot;&gt;apidock&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;inject(p1 = v1, p2 = v2)&lt;/p&gt;

  &lt;p&gt;Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Tốt hơn cho các hoạt động trên các đối tượng/collections có thể thay đổi giá trị và trả về một giá trị mới&lt;/li&gt;
  &lt;li&gt;Tốt cho các đối tượng nguyên thủy và các đối tượng mà trả về giá trị mới khi thay đổi.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;each_with_object&quot;&gt;each_with_object&lt;/h3&gt;
&lt;p&gt;Định nghĩa trên trang  &lt;a href=&quot;https://apidock.com/rails/Enumerable/each_with_object&quot;&gt;apidock&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;each_with_object(memo) public&lt;/p&gt;

  &lt;p&gt;Iterates over a collection, passing the current element and the memo to the block. Handy for building up hashes or reducing collections down to one object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Tốt hơn cho các hoạt động có thể thay đổi trên các đối tượng như là Hash hoặc Array&lt;/li&gt;
  &lt;li&gt;Khi sử dụng chúng ta cần cung cấp một đối tượng mới để bắt đầu và sử dụng đối tượng nó. Và dĩ nhiên sẽ không hữu dụng nếu bạn muốn sửa đổi trên 1 đối tượng hiện tại.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Bây giờ chúng ta sẽ cùng nhau đi vào ví dụ để làm rõ những luận điểm trên!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;vd1&quot;&gt;VD1:&lt;/h3&gt;
&lt;p&gt;Hãy chú ý tới các ví dụ khác nhau. Tưởng tượng bạn có một tập hợp các đối tượng và bạn muốn tạo ra một &lt;code&gt;hash&lt;/code&gt; sử dụng chúng và thực hiện một số loại ánh xạ khác nhau.&lt;/p&gt;

&lt;p&gt;Cùng tìm hiểu vấn đề:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bạn muốn xây dựng một đối tượng mới (Hash `lower_to_upper)&lt;/li&gt;
  &lt;li&gt;Bắt đầu với hash trống &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trong trường hợp này, &lt;code&gt;each_with_object&lt;/code&gt; rất tiện lợi:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lower = 'a'..'z'
lower_to_upper = lower.each_with_object({}) do |char, hash|
  hash[char] = char.upcase
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cùng xem sử dụng &lt;code&gt;inject&lt;/code&gt; nhưng có vẻ không tiện lợi bằng việc sử dụng &lt;code&gt;each_with_object&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lower = 'a'..'z'
lower_to_upper = lower.inject({}) do |hash, char|
  hash[char] = char.upcase
  hash
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nguyên nhân vì &lt;code&gt;inject&lt;/code&gt; yêu cầu giá trị để ghi nhớ cho block trong các lần sử dungj tiếp theo (&lt;code&gt;hash&lt;/code&gt; được khởi tạo với &lt;code&gt;{}&lt;/code&gt;) được trả về sau mỗi lần lặp qua &lt;code&gt;block&lt;/code&gt;. Vì vậy mặc dù bạn liên tục hoạt động trên cùng một đối tượng, bạn luôn cần nó được trả về ở cuối của khối.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;each_with_object&lt;/code&gt; mặt khác luôn gọi khối có cùng một đối tượng ban đầu được truyền làm đối số đầu tiên cho method.&lt;/p&gt;

&lt;h3 id=&quot;vd2&quot;&gt;VD2&lt;/h3&gt;
&lt;p&gt;Nhưng với trường hợp bạn đã có một đối tượng hiện để thay đổi. Trong trường hợp như vậy, thông thường bạn nên sử dụng &lt;code&gt;each&lt;/code&gt; thay vì &lt;code&gt;each_with_object&lt;/code&gt; nhưng &lt;code&gt;each_with_object&lt;/code&gt; có thể ngắn hơn một chút nếu bạn vẫn cần trả về đối tượng đã thay đổi.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sử dụng each:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mapping = {'ż' =&amp;gt; 'Ż', 'ó' =&amp;gt; 'Ó'}
lower = 'a'..'z'
lower.each do |char|
  mapping[char] = char.upcase
end
return mapping # optionally
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Sử dụng &lt;code&gt;each_with_object&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mapping = {'ż' =&amp;gt; 'Ż', 'ó' =&amp;gt; 'Ó'}
lower = 'a'..'z'
lower.each_with_object(mapping) do |char, hash|
  hash[char] = char.upcase
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mapping = {'ż' =&amp;gt; 'Ż', 'ó' =&amp;gt; 'Ó'}
lower = 'a'..'z'
lower.each_with_object(mapping) do |char|
  mapping[char] = char.upcase
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nhấn mạnh ở đây &lt;code&gt;each&lt;/code&gt; sẽ tốt hơn nếu bạn muốn thay đổi một tập hợp hiện có, bởi vì thông thường bạn không cần phải &lt;code&gt;return&lt;/code&gt;. Sau cùng, bất cứ khi nào đối tượng làm đối số, cho dù xuất phát từ đâu, có thể vẫn đang có đối tượng tham chiếu đến đối tượng này.&lt;/p&gt;

&lt;h3 id=&quot;vd3&quot;&gt;VD3&lt;/h3&gt;
&lt;p&gt;Trong ví dụ tiếp theo sẽ không thay đổi trạng thái bên trong của đối tượng mà luôn tạo ra một đối tượng mới. Pháp tóan sử dụng sẽ luôn trả về một đối tượng mới.&lt;/p&gt;

&lt;p&gt;Ví dụ đơn giản nhất là toán tử &lt;code&gt;+&lt;/code&gt; số.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 1
b = 2

a.frozen?
# =&amp;gt; true
b.frozen?
# =&amp;gt; true

c = a + b
# =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Không có cách nào để thay đổi đối tượng &lt;code&gt;integer&lt;/code&gt; được tham chiếu bởi biến a thành 3. ĐIều duy nhất có thể làm là gán một đối tượng khác cho biến a hoặc bằn b hoặc c.&lt;/p&gt;

&lt;p&gt;Tiếp theo là một ví dụ rõ ràng hơn:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'date'
d = Date.new(2017, 10, 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nếu bạn muốn một ngày khác, bạn không thể thay đổi instance &lt;code&gt;Date&lt;/code&gt; hiện tại. Bạn cần tạo một instance mới.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d.day=12
# =&amp;gt; NoMethodError: undefined method `day=' for #&amp;lt;Date:

e = Date.new(2017, 10, 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hey, sau một vài ví dụ đơn giản chúng ta đã phần nào hiểu được chúng ta có gì khi làm chủ được &lt;code&gt;inject&lt;/code&gt; nếu bạn có một đối tượng bất biến, &lt;code&gt;inject&lt;/code&gt; là sự lựa chọn hoàn hảo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(5..10).inject(:+)
(5..10).inject(0, :+)
(5..10).inject{|sum, n| sum + n }

(5..10).inject(1, :*)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hoặc:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;starting_date = Date.new(2019,10,20)
result = [1, 10].inject(starting_date) do |date, delay|
  date + delay
end
# =&amp;gt; Date.new(2017,10,31)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;vd4&quot;&gt;VD4&lt;/h3&gt;
&lt;p&gt;Làn này chúng ta sẽ tạo một đối tượng mới môi lần nhưng không phải vì có thể thay đổi trạng thái bên trong mà bởi vì phương thức đó nhất định sẽ trả về một đối tượng mới.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;result = [
 {1 =&amp;gt; 2},
 {2 =&amp;gt; 3},
 {3 =&amp;gt; 4},
 {1 =&amp;gt; 5},
].inject(:merge)
# =&amp;gt; {1=&amp;gt;5, 2=&amp;gt;3, 3=&amp;gt;4}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Hash#merge&lt;/code&gt; gộp hai hashes và trả về hash mới. Điều đó giải thích vì sao chúng ta có thể dễ dàng sử dụng với &lt;code&gt;inject&lt;/code&gt;
Sẽ ngắn gọn hơn so với:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
 {1 =&amp;gt; 2},
 {2 =&amp;gt; 3},
 {3 =&amp;gt; 4},
 {1 =&amp;gt; 5},
].each_with_object({}) {|element, hash| hash.merge!(element) }
# =&amp;gt; {1=&amp;gt;5, 2=&amp;gt;3, 3=&amp;gt;4}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Funny&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Có một điều lạ là các phần tử truyền vào block của &lt;code&gt;inject&lt;/code&gt; và &lt;code&gt;each_with_object&lt;/code&gt; đảo ngược nhau.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lower_to_upper = lower.each_with_object({}) do |char, `hash`|
  hash[char] = char.upcase
end

lower_to_upper = lower.inject({}) do |`hash`, char|
  hash[char] = char.upcase
  hash
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hi vọng sau bài này các bạn có thể hiểu thêm về &lt;code&gt;inject&lt;/code&gt; và &lt;code&gt;each_with_object&lt;/code&gt;. Chúc các bạn một ngày vui vẻ :D&lt;/p&gt;

&lt;p&gt;Nguồn: https://blog.arkency.com/inject-vs-each-with-object/&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Sep 2019 00:00:00 +0700</pubDate>
        <link>http://localhost:4000/tech/2019/09/09/ruby-inject-vs-each_with_object/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2019/09/09/ruby-inject-vs-each_with_object/</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Learn SQL advanced</title>
        <description>&lt;p&gt;The first thing i want tell about the first link i found from google. It make by qoura. Fine, i like it: https://www.quora.com/How-do-I-learn-more-advanced-SQL&lt;/p&gt;

&lt;p&gt;Firstly i want learn SQL from basic, because maybe i’m a beginer in every thing. Of course, i dont like this. But some day, when i joined my project, i know i am a chicken. So, if i’m not a bigger, i will be a person.&lt;/p&gt;

&lt;p&gt;First ez query:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM Customers;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This query will select all record with all attributes of Customers.&lt;/p&gt;

&lt;h3 id=&quot;select-distinct&quot;&gt;SELECT DISTINCT&lt;/h3&gt;
&lt;p&gt;The SQL select distinct statement is used to return only distinct(diffirent) values.
Inside a table, a column often contains many duplicate values, and sometimes you only want to list the different (distinct) value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Syntax:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT DISTINCT column1, column2,..
FROM table_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT DISTINCT Country FROM Customers;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This query will have result all different Country of customer.&lt;/p&gt;

&lt;h3 id=&quot;where-clause&quot;&gt;WHERE Clause&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;where&lt;/code&gt; clause is used to filter records.
The &lt;code&gt;where&lt;/code&gt; clause is used to extract only those records that fulfill a specified condition (Đáp ứng một điều kiện cụ thể).
&lt;code&gt;Syntax:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT column1, column2
FROM table_name
WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This query will return the records of column1 and column2 with condition is &lt;code&gt;condition&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;h3 id=&quot;sql-order-by&quot;&gt;SQL ORDER BY&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;order by&lt;/code&gt; key word is used to sort the result-set in ascending or desending order.
In the default, the &lt;code&gt;order by&lt;/code&gt; will sort the records in ascending order by default. To sort records &lt;code&gt;desending&lt;/code&gt;, use &lt;code&gt;DESC&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;insert-into&quot;&gt;INSERT INTO&lt;/h3&gt;
&lt;p&gt;Used to insert new records in table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ex:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sql-null-value&quot;&gt;SQL NULL VALUE&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;What is null value?&lt;/em&gt;
A field wit null value is field with no vale.&lt;/p&gt;

&lt;p&gt;IS NULL syntax&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT column_names
FROM table_name
WHERE column_name IS NULL;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IS NOT NULL syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 09 Sep 2019 00:00:00 +0700</pubDate>
        <link>http://localhost:4000/tech/2019/09/09/sql-advanced/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2019/09/09/sql-advanced/</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Những tricks khi học JSX</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Nội dung bài viết xoay quanh khóa học trên &lt;a href=&quot;https://www.codecademy.com/courses/react-101/lessons/react-jsx-advanced/exercises/self-closing-tags?action=resume_content_item&quot;&gt;Codecademy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;class-vs-classname&quot;&gt;class vs className&lt;/h3&gt;
&lt;p&gt;Trong HTML, &lt;code&gt;class&lt;/code&gt; thường được sử dụng để đặt tên cho thuộc tính của đối tượng&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1 class=&quot;big&quot;&amp;gt;Hey&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trong JSX, chúng ta không thể sử dụng &lt;code&gt;class&lt;/code&gt; mà phải sử dụng &lt;code&gt;className&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1 className=&quot;big&quot;&amp;gt;Hey&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because JSX gets translated into (được định dạng sang) JavaScript, and class is a reserved word (danh từ riêng) in JavaScript. Khi JSX rendered (được biểu diễn) JSX &lt;code&gt;className&lt;/code&gt; attributes (thuộc tính) are automatically rendered as &lt;code&gt;class&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

// Write code here:
const myDiv = (
	&amp;lt;div className=&quot;big&quot;&amp;gt;
    I AM A BIG DIV
  &amp;lt;/div&amp;gt;
)

ReactDOM.render(myDiv, document.getElementById('app'))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;self-closing-tags&quot;&gt;Self-Closing Tags&lt;/h3&gt;
&lt;p&gt;Another JSX ‘gotcha’ (Một bất ngờ của JSX) involves (liên quan) self-closing tags (các thẻ tự động đóng).&lt;/p&gt;

&lt;p&gt;What’s a self-closing tag?&lt;/p&gt;

&lt;p&gt;Most (phần lớn) HTML elements(thành phần) use two tags: an opening tag (&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;), and a closing tag (&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;). However, some HTML elements such as (như là) &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; use only one tag. The tag that belongs to(thuộc về) a single-tag element isn’t an opening tag nor a closing tag; it’s a self-closing tag.&lt;/p&gt;

&lt;p&gt;When you write a self-closing tag in HTML, it is optional to include a forward-slash (dấu gạch chéo) immediately before (ngay trước) the final angle-bracket (dấu ngoặc nhọn cuối cùng):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fine in HTML with a slash:

  &amp;lt;br /&amp;gt;

Also fine, without the slash:

  &amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But!&lt;/p&gt;

&lt;p&gt;In JSX, you have to include (phải bao gồm) the slash (dấu gạch chéo). If you write a self-closing tag in JSX and forget the slash (quên dấu gạch chéo), you will raise (nhận) an error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fine in JSX:

  &amp;lt;br /&amp;gt;

NOT FINE AT ALL in JSX:

  &amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;curly-braces-dấu-ngoặc-nhọn-in-jsx&quot;&gt;Curly Braces (Dấu ngoặc nhọn) in JSX&lt;/h3&gt;

&lt;p&gt;Any code in between (nằm giữa) the tags of a JSX element will be read as JSX (đọc dưới dạng JSX), not as regular (cú pháp) JavaScript! JSX doesn’t add numbers - it reads them as text, just like HTML.&lt;/p&gt;

&lt;p&gt;You need a way to write code that says, “Even though I am located in between JSX tags, treat me like ordinary JavaScript and not like JSX.”&lt;/p&gt;

&lt;p&gt;You can do this by wrapping (đóng gói) your code in curly braces (dấu ngoặc nhọn).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 5
&amp;lt;h1&amp;gt;{2 + 3}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;variables-biến-in-jsx&quot;&gt;Variables (biến) in JSX&lt;/h3&gt;

&lt;p&gt;When you inject (đưa) JavaScript into JSX, that JavaScript is part of the same environment (một phần của môi trường tương ứng) as the rest (phần còn lại) of the JavaScript in your file.&lt;/p&gt;

&lt;p&gt;That means that you can access (truy cập) variables while inside (trong khi bên trong) of a JSX expression, even if those (ngay cả khi) variables were declared (được khai báo) on the outside.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Declare a variable:
const name = 'Gerdo';

// Access your variable
// from inside of a JSX expression:
const greeting = &amp;lt;p&amp;gt;Hello, {name}!&amp;lt;/p&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;variable-attributes-các-thuộc-tính-biến-in-jsx&quot;&gt;Variable Attributes (các thuộc tính biến) in JSX&lt;/h3&gt;

&lt;p&gt;When writing JSX, it’s common to use variables (các biến) to set attributes (các thuộc tính).&lt;/p&gt;

&lt;p&gt;Here’s an example of how that might work (cách nó hoạt động):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Use a variable to set the `height` and `width` attributes:

const sideLength = &quot;200px&quot;;

const panda = (
  &amp;lt;img
    src=&quot;images/panda.jpg&quot;
    alt=&quot;panda&quot;
    height={sideLength}
    width={sideLength} /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how in this example, the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt;‘s attributes each get their own line. This can make your code more readable (dễ đọc) if you have a lot of attributes (có nhiều thuộc tính) on one element (thành phần).&lt;/p&gt;

&lt;p&gt;Object properties (thuộc tính đối tượng) are also often used to set attributes (đặt thuộc tính):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const pics = {
  panda: &quot;http://bit.ly/1Tqltv5&quot;,
  owl: &quot;http://bit.ly/1XGtkM3&quot;,
  owlCat: &quot;http://bit.ly/1Upbczi&quot;
};

const panda = (
  &amp;lt;img
    src={pics.panda}
    alt=&quot;Lazy Panda&quot; /&amp;gt;
);

const owl = (
  &amp;lt;img
    src={pics.owl}
    alt=&quot;Unimpressed Owl&quot; /&amp;gt;
);

const owlCat = (
  &amp;lt;img
    src={pics.owlCat}
    alt=&quot;Ghastly Abomination&quot; /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;event-sự-kiện-listeners--lắng-nghe-in-jsx&quot;&gt;Event (sự kiện) Listeners  (lắng nghe) in JSX&lt;/h3&gt;
&lt;p&gt;https://www.codecademy.com/courses/react-101/lessons/react-jsx-advanced/exercises/jsx-event-listeners?action=resume_content_item&lt;/p&gt;

&lt;p&gt;JSX elements (các phần tử ) can have event listeners (sự kiện lắng nghe), just like HTML elements can. Programming (lập trình) in React means constantly working (liên tục làm việc) with event listeners.&lt;/p&gt;

&lt;p&gt;You create an event listener by giving a (cung cấp) JSX element a special attribute (thuộc tính đặc biệt). Here’s an example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img onClick={myFunc} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An event listener attribute’s name should be something like onClick or onMouseOver: the word on, plus the type of event that you’re listening for. You can see a list of valid event names here.&lt;/p&gt;

&lt;p&gt;An event listener attribute’s value should be a function. The above example would only work if myFunc were a valid function that had been defined elsewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function myFunc() {
  alert('Make myFunc the pFunc... omg that was horrible i am so sorry');
}

&amp;lt;img onClick={myFunc} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in HTML, event listener names are written in all lowercase, such as onclick or onmouseover. In JSX, event listener names are written in camelCase, such as onClick or onMouseOver.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Aug 2019 00:00:00 +0700</pubDate>
        <link>http://localhost:4000/tech/2019/08/27/reactjs-jsx/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2019/08/27/reactjs-jsx/</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>What is Jekyll!</title>
        <description>
</description>
        <pubDate>Fri, 12 Jul 2019 05:48:45 +0700</pubDate>
        <link>http://localhost:4000/blog/2019/07/12/unicode_equivalence/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/07/12/unicode_equivalence/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>From Third Project</title>
        <description>&lt;h2 id=&quot;những-điều-thú-vị&quot;&gt;Những điều thú vị&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;From 1/7/2019&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;regex-tìm-mọi-khoảng-trắng-unicode-tiếng-anh-và-tiếng-nhật&quot;&gt;Regex tìm mọi khoảng trắng unicode tiếng Anh và tiếng Nhật&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;/[[:space:]]|\s+/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sử dụng gem ransack để tìm kiếm với full_name&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ransacker :full_name,
    formatter: proc { |v|
      v.gsub(/[[:space:]]|\s+/, &quot;&quot;)
    } do |parent|
    Arel::Nodes::NamedFunction.new(&quot;CONCAT_WS&quot;,
      [
        Arel::Nodes::SqlLiteral.new('&quot;&quot;'),
        parent.table[:last_name], parent.table[:first_name]
      ])
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change author in commit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git filter-branch --commit-filter '
        if [ &quot;$GIT_COMMITTER_NAME&quot; = &quot;&amp;lt;hungnv950&amp;gt;&quot; ];
        then
                GIT_COMMITTER_NAME=&quot;&amp;lt;hungbnv-1225&amp;gt;&quot;;
                GIT_AUTHOR_NAME=&quot;&amp;lt;hungbnv-1225&amp;gt;&quot;;
                GIT_COMMITTER_EMAIL=&quot;&amp;lt;nguyen.van.hungb@sun-asterisk.com&amp;gt;&quot;;
                GIT_AUTHOR_EMAIL=&quot;&amp;lt;nguyen.van.hungb@sun-asterisk.com&amp;gt;&quot;;
                git commit-tree &quot;$@&quot;;
        else
                git commit-tree &quot;$@&quot;;
        fi' HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  scope :wait_admin_approve, lambda {
    candidate = Candidate.arel_table
    flu = Influencer.arel_table
    left_joins(:influencer).where(candidate[:status].eq(&quot;applied&quot;).and(flu[:company_id].eq(nil)).or(
                                    candidate[:status].eq(&quot;office_approved&quot;).and(flu[:company_id].not_eq(nil))
                                  ))
  }
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 01 Jul 2019 00:00:00 +0700</pubDate>
        <link>http://localhost:4000/2019/07/01/from-third-project/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/01/from-third-project/</guid>
        
        
      </item>
    
      <item>
        <title>Sử dụng nhiều tài khoản github trên cùng một máy tính cá nhân</title>
        <description>&lt;h3 id=&quot;step-1-tạo-ssh-key-mới-cho-tài-khoản-công-việc&quot;&gt;Step 1: Tạo ssh key mới cho tài khoản công việc&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;ssh-keygen -t rsa -C “github-email-address”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Khi màn hình hiện &lt;code&gt;Enter file in which to save the key (/home/&amp;lt;user&amp;gt;/.ssh/id_rsa):&lt;/code&gt;  Nhập user cho công việc của bạn, ví dụ mình sẽ nhập là &lt;code&gt;id_rsa_sun&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Kiểm tra xem id_rsa_sun đã được sinh ra chưa.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;cd cd ~/.ssh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ls&lt;/p&gt;

  &lt;p&gt;Danh sách các file đã được sinh ra:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;id_rsa_sun  id_rsa_sun.pub  id_rsa  id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;step-2-cài-đặt-ssh-key-trên-github&quot;&gt;Step 2: Cài đặt ssh key trên github&lt;/h3&gt;

&lt;p&gt;Lấy id_rsa của email mới bạn vừa tạo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;cat id_rsa_sun.pub&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sau đó nhập vào ssh-key cuả tài khoản git công việc tại https://github.com/settings/keys&lt;/p&gt;

&lt;h3 id=&quot;bước-3-cài-đặt-github-host&quot;&gt;Bước 3: Cài đặt Github Host&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;touch ~/.ssh/config&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;nano ~/.ssh/config&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sửa file config của bạn thành dạng:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Tài khoản git cá nhân vẫn dùng của bạn
Host github.com-username
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa
# Tài khoản công việc
Host github.com-sun # config này sẽ dùng để xử lý xác định khi cấu hình remote
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_sun  # id_rsa_sun mà chúng ta vừa tạo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sau khi tạo 1 project trên github với tài khoản khác. Khi bạn &lt;code&gt;add remote&lt;/code&gt; nên chú ý user khi add.
Ví dụ khi clone repo mới:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git clone git@github.com-sun:&amp;lt;&lt;strong&gt;user&lt;/strong&gt;&amp;gt;/sample_ruby.git&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;git config user.email “&amp;lt;&lt;strong&gt;emai dùng để sinh id_rsa_sun ở trên&lt;/strong&gt;&amp;gt;”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sau đó bạn có thể add và commit bình thường.&lt;/p&gt;

&lt;p&gt;Add remote với repo mới:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;git remote add origin git@github.com-sun:&amp;lt;&lt;strong&gt;user&lt;/strong&gt;&amp;gt;/sample_ruby.git&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: &lt;code&gt;sun&lt;/code&gt; ở đây là user của mình đặt ra, các bạn có thể thay đổi theo user công việc hoặc nick name bạn muốn cho phù hợp.&lt;/p&gt;

&lt;h3 id=&quot;nguồn-git-push--pull-with-two-different-accounts-and-two-different-users-on-the-same-machine&quot;&gt;Nguồn: &lt;a href=&quot;https://medium.com/@therajanmaurya/git-push-pull-with-two-different-account-and-two-different-user-on-same-machine-a85f9ee7ec61&quot;&gt;Git Push &amp;amp; Pull with Two different accounts and Two different users on the same machine&lt;/a&gt;&lt;/h3&gt;
</description>
        <pubDate>Wed, 26 Jun 2019 05:48:45 +0700</pubDate>
        <link>http://localhost:4000/tech/2019/06/26/su-dung-nhieu-tai-khoan-github-tren-cung-mot-may-tinh-ca-nhan/</link>
        <guid isPermaLink="true">http://localhost:4000/tech/2019/06/26/su-dung-nhieu-tai-khoan-github-tren-cung-mot-may-tinh-ca-nhan/</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Cha đã quên</title>
        <description>&lt;p&gt;&lt;strong&gt;Cha đã quên&lt;/strong&gt; - một câu chuyện ngắn của tác giả &lt;em&gt;W.Livingston Larned&lt;/em&gt; trích từ cuốn (&lt;strong&gt;Đắc Nhân Tâm&lt;/strong&gt; - &lt;em&gt;Dale Carnegie&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Con trai yêu quý, con hãy nghe những lời ân hận của cha đây. Cha đã lẻn vào phòng con khi con đang chìm vào giấc ngủ trẻ thơ. Nhìn kìa, một tay con đặt dưới gò má, những lọn tóc hung đẫm mồ hôi bám chặt vào vầng trán ẩm ướt. Chỉ cách đây vài phút thôi, khi cha ngồi trong phòng đọc sách và xem lại bài viết của mình, nỗi hối hận dâng ngập hồn cha. Và cha đã chạy đến phòng con để nói lời xin lỗi.&lt;/p&gt;

&lt;p&gt;Con ơi, cha đã tức giận, quát mắng khi con cầm khăn lau mặt qua quýt trong lúc thay quần áo đi học, lúc con để đôi giày dơ bẩn hay thấy con vứt vật dụng lung tung trong nhà. Cha luôn chăm chăm nhìn thấy toàn là lỗi lầm của con. Buổi sáng cha thấy con không ngăn nắp khi ngủ dậy, lại còn ăn uống vội vàng và lấy một lúc quá nhiều thức ăn vào đĩa. Vì chỉ nhìn thấy lỗi lầm nên khi con chào cha xin phép ra ngoài chơi, cha chỉ cau mày và trả lời cộc lốc không chút thiện cảm: “Hừm! Liệu mà về sớm đấy!”.&lt;/p&gt;

&lt;p&gt;Buổi chiều, cha cũng tức giận với những sơ suất của con. Khi thấy đôi vớ của con rách, cha đã làm con phải mất mặt trước bạn bè khi lôi con về nhà. Con thật sự đã làm cha rất giận dữ vì đã không tiết kiệm, không chịu giữ gìn những món đồ mà cha đã phải vất vả làm việc dành dụm mua cho con.&lt;/p&gt;

&lt;p&gt;Khi cha đang đọc báo, con rụt rè bước tới ngước nhìn cha với ánh mắt ngây thơ trong sáng, cha lại quát lên: “Mày muốn cái gì?”. Và trái tim cha đã xúc động biết dường nào khi con chỉ im lặng chạy đến, vòng tay bé bỏng ôm cổ cha thật chặt với tất cả yêu thương trìu mến rồi lại chạy biến thật nhanh ra ngoài.&lt;/p&gt;

&lt;p&gt;Con thương yêu!&lt;/p&gt;

&lt;p&gt;Con có biết không, tờ báo đã rời khỏi tay cha trong yên lặng và một nỗi sợ lẫn đau xót ngẹn ngào xâm chiếm cõi lòng cha. Cha đã làm gì thế này? Cha đã biến mình thành một người cha suốt ngày chỉ xăm soi tội lỗi của con mình. Một người cha chỉ toàn kiếm cái xấu của con mình để chê trách và đây là phần thưởng mà cha dành cho con như một đứa trẻ ư? Cha chỉ muốn con phải thế này thế nọ, cha chỉ muốn con phải cư xử như người lớn. Cha đã đo con bằng cây thước dành cho một người trưởng thành, bằng cả những năm tháng tuổi đời và sự trải nghiệm già dặn của cha.&lt;/p&gt;

&lt;p&gt;Con yêu của cha!&lt;/p&gt;

&lt;p&gt;Trong khi cha nhìn con bằng đôi mắt già cỗi và muộn phiền, đầy thành kiến, soi mói ấy, cha chẳng thèm biết đến những cái tốt, điều hay và sự chân thành, hồn nhiên trong tư chất của con. Trái tim nhỏ bé của con nồng ấm và to lớn như ánh rạng đông đang tặng bao tia nắng ấm cho ngọn đồi bao la. Con đã hồn nhiên lao vào hôn chúc cha ngủ ngon mà không hề vướng bận việc cha đã la mắng con cả ngày và hằn học với con vì những lý do không chính đáng.&lt;/p&gt;

&lt;p&gt;Con thương yêu!&lt;/p&gt;

&lt;p&gt;Cha không thể đợi thêm nữa. Cha phải nhanh chóng bước đến bên con, quỳ xuống cạnh chiếc giường nhỏ bé và nhìn khuôn mặt thơ ngây của con trong giấc ngủ với một niềm ân hận vô cùng. Có thể, con còn quá bé bỏng để hiểu nhưng cảm xúc đang tràn ngập lòng cha. Cha hứa với con, ngay từ giây phút này, cha sẽ trở lại là người cha đích thực và luôn biết trân trọng tình yêu của con ngay cả trong giây phút nóng giận bừng bừng. Cha sẽ là người bạn trung thành của con, sẽ đau khổ khi con gặp bất hạnh, sẽ cười vui khi con gặp may mắn sung sướng. Cha sẽ cắn chặt môi để không thốt ra những lời gắt gỏng mỗi khi con quỷ giận dữ trỗi dậy trong lòng cha. Cha sẽ tự bảo mình rằng con vẫn còn bé bỏng.&lt;/p&gt;

&lt;p&gt;Ôi, hình như cha đã nhìn đứa con thơ dại của cha như nhìn một con người trưởng thành thật sự. Giờ đây, nhìn con cuộn mình trong chăn và mệt mỏi ngủ yên trên chiếc giường bé xíu, Cha chợt nhận ra rằng con chỉ là một đứa trẻ thơ ngây. Sáng sáng, con vẫn nũng nịu trong vòng tay trìu mến của mẹ. Mái tóc tơ mềm mại của con còn vướng víu trên bờ vai mẹ, cần được che chở trong cảm giác được yêu thương. Vậy mà, Cha đã đòi hỏi ở con quá nhiều…..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sự thực, người cha chưa từng đứng ở lập trường của một cậu bé để hiểu về cuộc sống như thế nào, hoặc ông ấy đã quên mất. Và cũng thật bất ngờ khi một đứa bé trước những sự đối xử của cha thì em vẫn rất mực yêu thương cha với sự chân thành. 

Theo mình, câu chuyện không chỉ dừng lại ở việc cách giáo dục con cái của cá bậc cha mẹ mà nó còn để lại nhiều bài học về cách sống và cách tiếp nhận cuộc sống. Ai cũng sẽ là những đứa trẻ trong lĩnh vực mới của mình và nếu chân thành như cách mà đứa trẻ đối xử với người cha ắt sẽ thành công. Và hi vọng những người anh - người cha vẫn luôn sẵn lòng đứng ở vị trí newbee để có thể cùng nhau hoàn thành công việc một cách tốt nhất.
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 26 Jun 2019 05:48:45 +0700</pubDate>
        <link>http://localhost:4000/life/2019/06/26/morning-speech-cha-da-quen/</link>
        <guid isPermaLink="true">http://localhost:4000/life/2019/06/26/morning-speech-cha-da-quen/</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>What is Jekyll!</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. Here is a little quote from the official website:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It takes a template directory containing raw text files in various formats, runs it through &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; (or &lt;a href=&quot;http://redcloth.org/textile&quot;&gt;Textile&lt;/a&gt;) and Liquid converters, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server. Jekyll also happens to be the engine behind &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, which means you can use Jekyll to host your project’s page, blog, or website from GitHub’s servers for free.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;jekyllrb.com&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 29 May 2019 05:48:45 +0700</pubDate>
        <link>http://localhost:4000/blog/2019/05/29/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/05/29/welcome-to-jekyll/</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
